<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>SparkWang</title>
    <link>http://spark.wangxing.name</link>
    <description>sparkwang&#39;s notebook</description>
    <pubDate>Thu, 07 Jan 2016 23:38:09 CST</pubDate>
    <lastBuildDate>Thu, 07 Jan 2016 23:38:09 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Awesome Tools</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/awesome-repos</link>
      <description><![CDATA[awesome tools]]></description>
      <pubDate>2016-01-07</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/awesome-repos</guid>
    </item>
    <item>
      <title>Memory Management in C Language</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/memory-management-in-c-language</link>
      <description><![CDATA[Memory Management in C Language]]></description>
      <pubDate>2016-01-07</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/memory-management-in-c-language</guid>
    </item>
    <item>
      <title>《C 语言核心技术》读书笔记</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/《c-语言核心技术》读书笔记/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>《C 语言核心技术》读书笔记</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline3">1. 类型转换</a>
<ul>
<li><a href="#orgheadline2">1.1. 隐式类型转换何时发生</a>
<ul>
<li><a href="#orgheadline1">1.1.1. Conversion rank</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgheadline4">2. 表达式和运算符</a></li>
<li><a href="#orgheadline5">3. 函数</a></li>
<li><a href="#orgheadline6">4. 数组</a></li>
<li><a href="#orgheadline7">5. 指针</a></li>
<li><a href="#orgheadline8">6. 结构、联合、位字段</a></li>
<li><a href="#orgheadline9">7. 声明</a></li>
<li><a href="#orgheadline12">8. 动态内存管理</a>
<ul>
<li><a href="#orgheadline10">8.1. 用于动态内存管理的函数</a></li>
<li><a href="#orgheadline11">8.2. 注意事项</a></li>
</ul>
</li>
<li><a href="#orgheadline13">9. 输入和输出</a></li>
<li><a href="#orgheadline14">10. 预处理</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3"><span class="section-number-2">1</span> 类型转换</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">1.1</span> 隐式类型转换何时发生</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>操作数类型不合适</li>
<li>调用一个函数时，自变量的类型与函数参数类型不匹配</li>
<li>变量初始化或给变量赋值</li>
</ul>

<div class="org-src-container">

<pre class="src src-c">int sum  = 22, count = 5;
double mean = (double)sum / count;
</pre>
</div>

<p>
由于类型转换运算符的优先级高于除法运算符，因此 <code>sum</code> 先被转换为 <code>double</code> 。然后编译器隐式地将除数 <code>count</code> 转型，然后进行除法。
</p>
</div>
<div id="outline-container-orgheadline1" class="outline-4">
<h4 id="orgheadline1"><span class="section-number-4">1.1.1</span> Conversion rank</h4>
<div class="outline-text-4" id="text-1-1-1">
<ul class="org-ul">
<li>两个无符号整数类型具有不同的转换等级，位长较宽类型的等级较高。</li>
<li></li>
</ul>
</div>
</div>
</div>
</div>
<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4"><span class="section-number-2">2</span> 表达式和运算符</h2>
</div>
<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5"><span class="section-number-2">3</span> 函数</h2>
</div>
<div id="outline-container-orgheadline6" class="outline-2">
<h2 id="orgheadline6"><span class="section-number-2">4</span> 数组</h2>
</div>
<div id="outline-container-orgheadline7" class="outline-2">
<h2 id="orgheadline7"><span class="section-number-2">5</span> 指针</h2>
</div>
<div id="outline-container-orgheadline8" class="outline-2">
<h2 id="orgheadline8"><span class="section-number-2">6</span> 结构、联合、位字段</h2>
</div>
<div id="outline-container-orgheadline9" class="outline-2">
<h2 id="orgheadline9"><span class="section-number-2">7</span> 声明</h2>
</div>
<div id="outline-container-orgheadline12" class="outline-2">
<h2 id="orgheadline12"><span class="section-number-2">8</span> 动态内存管理</h2>
<div class="outline-text-2" id="text-8">
</div><div id="outline-container-orgheadline10" class="outline-3">
<h3 id="orgheadline10"><span class="section-number-3">8.1</span> 用于动态内存管理的函数</h3>
<div class="outline-text-3" id="text-8-1">
<dl class="org-dl">
<dt>malloc()</dt><dd>分配新的内存区域</dd>
<dt>calloc()</dt><dd>分配新的内存区域</dd>
<dt>realloc()</dt><dd>调整以前分配的内存区域</dd>
<dt>free()</dt><dd>释放以前分配的内存区域</dd>
</dl>
</div>
</div>
<div id="outline-container-orgheadline11" class="outline-3">
<h3 id="orgheadline11"><span class="section-number-3">8.2</span> 注意事项</h3>
<div class="outline-text-3" id="text-8-2">
<ul class="org-ul">
<li><code>malloc()</code> 分配的内存不保证会被初始化</li>
<li><code>calloc()</code> 会将分配的内存的每个字节初始化为 0</li>
<li><code>malloc()</code> 和 <code>calloc()</code> 都返回 <code>void</code> 指针</li>
<li>当存取分配的内存位置时，所使用的指针类型决定了如何翻译该位置的数据。</li>
<li>如果内存分配成功，会得到“指向内存区域开端”的指针。“开端”指的是内存区域的最低字节地址。</li>
<li><b>NOTE</b> 分配的内存区域会被 <b>对齐</b> ，任何对象类型都可以存储在该地址。</li>
<li>如果给 <code>malloc()</code> 传入的参数为 0，则行为取决于 <code>malloc()</code> 的具体实现，可能返回
<code>NULL</code> ，也可能返回一个 unique pointer， 返回的这个指针可以传给 <code>free()</code> 函数。</li>
<li>如果给 <code>free()</code> 传入的参数为 <code>NULL</code> ，则函数不起任何作用。</li>
<li>如果给 <code>free()</code> 传入的指针不是 <code>malloc()</code> 等函数分配的，或者已经被释放掉，则
<code>free()</code> 的行为未定义。</li>
</ul>

<div class="org-src-container">

<pre class="src src-c">char *getline(unsigned int len_max) {
  char *linePtr = malloc(len_max + 1);
  if (linePtr != NULL) {
    int c = EOF;
    unsigned int i = 0;
    while (i &lt; len_max &amp;&amp; (c = getchar()) != '\n' &amp;&amp; c != EOF) {
      linePtr[i++] = (char) c;
    }
    linePtr[i] = '\0';

    if (c == EOF &amp;&amp; i == 0) {
      free(linePtr);
      linePtr = NULL;
    } else {
      linePtr = realloc(linePtr, i+1);
    }
  }
  return linePtr;
}

char *line;
if ((line = getline(128)) != NULL)
  {
    /* */
    free(line);
  }
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-orgheadline13" class="outline-2">
<h2 id="orgheadline13"><span class="section-number-2">9</span> 输入和输出</h2>
</div>
<div id="outline-container-orgheadline14" class="outline-2">
<h2 id="orgheadline14"><span class="section-number-2">10</span> 预处理</h2>
</div>

</div>
</div>]]></description>
      <pubDate>2016-01-07</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/《c-语言核心技术》读书笔记/</guid>
    </item>
    <item>
      <title>elisp notes</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/elisp-notes</link>
      <description><![CDATA[elisp 笔记]]></description>
      <pubDate>2016-01-07</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/elisp-notes</guid>
    </item>
    <item>
      <title>Functional Thinking 读书笔记</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/functional-thinking-读书笔记/</link>
      <description><![CDATA[<div>
<div class="post">
<h1>Functional Thinking 读书笔记</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgheadline5">1. Why</a>
<ul>
<li><a href="#orgheadline1">1.1. 编程语言趋势</a></li>
<li><a href="#orgheadline2">1.2. Ceding Control to the Language/Runtime</a></li>
<li><a href="#orgheadline3">1.3. Concision</a></li>
<li><a href="#orgheadline4">1.4. Three versions of indexOfAny()</a></li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5"><span class="section-number-2">1</span> Why</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li>不能用使用斧子的方法使用电锯。学习一个全新的编程模式与学习一门新的编程语言是两回事。</li>
<li>Computer science often advances in fits and starts. (断断续续地；间歇地)</li>
<li>好的想法往往在很多年后才会变成主流。
<ul class="org-ul">
<li>Simula67 创建于 1967 年，是第一门面向对象编程语言，但面向对象在 1983 年 C++出现并逐渐流行之后才变得主流。</li>
</ul></li>
<li>函数式编程几十年前被学术界开发出来，现在正慢慢地蔓延（crept into）到各个现代编程语言中。</li>
</ul>

<div class="org-src-container">

<pre class="src src-java" id="orgsrcblock1">public class Words {
    private Set&lt;String&gt; NON_WORDS = new HashSet&lt;String&gt;() {{
            add("the"); add("and"); add("of"); add("to"); add("a");
            add("i"); add("it"); add("in"); add("or"); add("is");
            add("d"); add("s"); add("as"); add("so"); add("but");
            add("be");
        }};

    public Map wordFreq(String words) {
        TreeMap&lt;String, Integer&gt; wordMap = new TreeMap&lt;String, Integer&gt;();
        Matcher m = Pattern.compile("\\w+").matcher(words);
        while (m.find()) {
            String word = m.group().toLowerCase();
            if (!NON_WORDS.contains(word)) {
                if (wordMap.get(word) == null) {
                    wordMap.put(word, 1);
                }
                else {
                    wordMap.put(word, wordMap.get(word) + 1);
                }
            }
        }
        return wordMap;
    }
}
</pre>
</div>

<div class="org-src-container">

<pre class="src src-java" id="orgsrcblock2">private List&lt;String&gt; regexToList(String words, String regex) {
    List wordList = new ArrayList&lt;&gt;();
    Matcher m = Pattern.compile(regex).matcher(words);
    while (m.find())
        wordList.add(m.group());
    return wordList;
}

public Map wordFreq(String words) {
    TreeMap&lt;String, Integer&gt; wordMap = new TreeMap&lt;&gt;();
    regexToList(words, "\\w+").stream()
        .map(w -&gt; w.toLowerCase())
        .filter(w -&gt; !NON_WORDS.contains(w))
        .forEach(w -&gt; wordMap.put(w, wordMap.getOrDefault(w, 0)+1));
    return wordMap;
}
</pre>
</div>
</div>

<div id="outline-container-orgheadline1" class="outline-3">
<h3 id="orgheadline1"><span class="section-number-3">1.1</span> 编程语言趋势</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>Groovy 添加了很多函数式编程功能，包括 <code>memoization</code> 等高级特性。</li>
<li>Java 增加了 lambda blocks (i.e., higher-order functions)</li>
<li>JavaScript 具有很多函数式编程特性</li>
<li>C++ 在 2011 标准中添加了 lambda blocks</li>
</ul>
</div>
</div>

<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2"><span class="section-number-3">1.2</span> Ceding Control to the Language/Runtime</h3>
</div>

<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3"><span class="section-number-3">1.3</span> Concision</h3>
<div class="outline-text-3" id="text-1-3">
<blockquote>
<p>
OO makes code understandable by encapsulating moving parts. FP makes code
understandable by minimizing moving parts.
&#x2013; Michael Feathers
</p>
</blockquote>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4"><span class="section-number-3">1.4</span> Three versions of indexOfAny()</h3>
<div class="outline-text-3" id="text-1-4">
<div class="org-src-container">

<pre class="src src-java" id="orgsrcblock3">// From Apache Commons Lang, http://commons.apache.org/lang/
public static int indexOfAny(String str, char[] searchChars) {
    if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {
        return INDEX_NOT_FOUND;
    }
    int csLen = str.length();
    int csLast = csLen - 1;
    int searchLen = searchChars.length;
    int searchLast = searchLen - 1;

    for (int i = 0; i &lt; csLen; i++) {
        char ch = str.charAt(i);
        for (int j = 0; j &lt; searchLen; j++) {
            if (searchChars[j] == ch) {
                if (i &lt; csLast &amp;&amp; j &lt; searchLast &amp;&amp; CharUtils.isHighSurrogate(ch)) {
                    if (searchChars[j+1] == str.charAt(i+1)) {
                        return i;
                    }
                } else {
                    return i;
                }
            }
        }
    }
    return INDEX_NOT_FOUND;
}
</pre>
</div>

<div class="org-src-container">

<pre class="src src-java" id="orgsrcblock4">def firstIndexOfAny(input : String, searchChars : Seq[Char]) : Option[Int] = {
    def indexedInput = (0 until input.length).zip(input)
    val result = for (pair &lt;- indexedInput;
                      char &lt;- searchChars;
                      if (char == pair._2))
        yield(pair._1)
    if (result.isEmpty)
        None
    else
        Some(result.head)
</pre>
</div>
</div>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-01-07</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/functional-thinking-读书笔记/</guid>
    </item>
    <item>
      <title>Install Debian</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/install-debian</link>
      <description><![CDATA[install debian]]></description>
      <pubDate>2016-01-07</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/install-debian</guid>
    </item>
    <item>
      <title>Use Spacemacs</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/use-spacemacs</link>
      <description><![CDATA[Spacemacs 使用]]></description>
      <pubDate>2016-01-07</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/use-spacemacs</guid>
    </item>
  </channel>
</rss>