<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>Sean Wang&#39;s Notebook</title>
    <link>http://spark.wangxing.name</link>
    <description>Happy Hacking</description>
    <pubDate>Mon, 31 Jul 2017 22:18:15 CST</pubDate>
    <lastBuildDate>Mon, 31 Jul 2017 22:18:15 CST</lastBuildDate>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>Org-page static site generator (https://github.com/kelvinh/org-page)</generator>
    <item>
      <title>Install Debian</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/install-debian</link>
      <description><![CDATA[install debian]]></description>
      <pubDate>2017-07-31</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/install-debian</guid>
    </item>
    <item>
      <title>Use Spacemacs</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/use-spacemacs</link>
      <description><![CDATA[Spacemacs 使用]]></description>
      <pubDate>2017-07-31</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/use-spacemacs</guid>
    </item>
    <item>
      <title>git 常用配置</title>
      <link>http://spark.wangxing.name/blog/2016/01/08/git-常用配置/</link>
      <description><![CDATA[<div>
<div class="post">
<h1 class="title">git 常用配置</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org16c5b7a"><code>.gitconfig</code></a></li>
<li><a href="#orgbc6527f"><code>.gitignore</code></a></li>
</ul>
</div>
</div>

<div id="outline-container-org16c5b7a" class="outline-2">
<h2 id="org16c5b7a"><code>.gitconfig</code></h2>
<div class="outline-text-2" id="text-org16c5b7a">
<pre class="example">
[user]
  name = foo
  email = foo@abc.com

[push]
  default = upstream

[color]
  status = auto
  diff = auto
  branch = auto
  interactive = auto

[alias]
  st = status -s
  ci = commit
  co = checkout

[core]
  excludesfile = ~/.gitignore
  editor = vim

[http]
  sslVerify = false
</pre>
</div>
</div>

<div id="outline-container-orgbc6527f" class="outline-2">
<h2 id="orgbc6527f"><code>.gitignore</code></h2>
<div class="outline-text-2" id="text-orgbc6527f">
<pre class="example">
*~
auto
*.o
*.svn
*.aux
*.log
*.snm
*.toc
*.blg
*.vrb
*.nav
*.out
*.lof
*.lol
*.lot
*.bak
*.tdo
*.pyg
*.synctex.gz
_*
GPATH
GRTAGS
GSYMS
GTAGS
</pre>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2017-07-31</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/08/git-常用配置/</guid>
    </item>
    <item>
      <title>elisp notes</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/elisp-notes</link>
      <description><![CDATA[elisp 笔记]]></description>
      <pubDate>2017-03-14</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/elisp-notes</guid>
    </item>
    <item>
      <title>system-config</title>
      <link>http://spark.wangxing.name/blog/2016/01/09/system-config/</link>
      <description><![CDATA[<div>
<div class="post">
<h1 class="title">system-config</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org540aa24">1. Motivation</a></li>
<li><a href="#org8b4e1b0">2. <span class="todo TODO">TODO</span> Method</a></li>
<li><a href="#orga2dab74">3. <span class="todo TODO">TODO</span> Reference</a></li>
</ul>
</div>
</div>

<div id="outline-container-org540aa24" class="outline-2">
<h2 id="org540aa24"><span class="section-number-2">1</span> Motivation</h2>
<div class="outline-text-2" id="text-1">
<p>
Debian 系统安装完之后，需要安装很多软件并进行许多配置，这个安装配置的过程应当实现自动化。
</p>
</div>
</div>

<div id="outline-container-org8b4e1b0" class="outline-2">
<h2 id="org8b4e1b0"><span class="section-number-2">2</span> <span class="todo TODO">TODO</span> Method</h2>
<div class="outline-text-2" id="text-2">
<p>
首先，软件安装有以下几种方式：
</p>
<ul class="org-ul">
<li>apt-get 方式安装</li>
<li>从 github 克隆源码后安装</li>
<li>从固定地址下载源码后安装</li>
<li>Python pip</li>
</ul>

<p>
需要安装和配置的包括:
</p>
<ul class="org-ul">
<li>Window Manager</li>
<li>Git</li>
<li>sources.list</li>
<li>Emacs</li>
<li>Keyboard</li>
<li>sudo</li>
<li>SSH</li>
<li>Python</li>
<li>Android Development Tools</li>
<li>Tmux</li>
<li>zsh</li>
<li>LaTeX</li>
<li>Browser</li>
<li>&#x2026;</li>
</ul>
</div>
</div>

<div id="outline-container-orga2dab74" class="outline-2">
<h2 id="orga2dab74"><span class="section-number-2">3</span> <span class="todo TODO">TODO</span> Reference</h2>
<div class="outline-text-2" id="text-3">
<p>
以下项目可以参考：
</p>
<ul class="org-ul">
<li><a href="https://github.com/baohaojun/system-config.git"><a href="https://github.com/baohaojun/system-config.git">https://github.com/baohaojun/system-config.git</a></a></li>
<li><a href="https://github.com/donnemartin/dev-setup.git">https://github.com/donnemartin/dev-setup.git</a></li>
<li></li>
</ul>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-01-10</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/09/system-config/</guid>
    </item>
    <item>
      <title>nmap</title>
      <link>http://spark.wangxing.name/blog/2016/01/08/nmap/</link>
      <description><![CDATA[<div>
<div class="post">
<h1 class="title">nmap</h1>


</div>
</div>]]></description>
      <pubDate>2016-01-08</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/08/nmap/</guid>
    </item>
    <item>
      <title>用 rsync 同步本地和远程目录 </title>
      <link>http://spark.wangxing.name/blog/2016/01/08/用-rsync-同步本地和远程目录-/</link>
      <description><![CDATA[<div>
<div class="post">
<h1 class="title">用 rsync 同步本地和远程目录 </h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgc7a1d08">1. Intro</a></li>
<li><a href="#org7a202a7">2. Options</a></li>
<li><a href="#org873e18b">3. 注意</a></li>
</ul>
</div>
</div>

<div id="outline-container-orgc7a1d08" class="outline-2">
<h2 id="orgc7a1d08"><span class="section-number-2">1</span> Intro</h2>
<div class="outline-text-2" id="text-1">
<p>
<code>rsync</code> 命令可用来在本地和远程机器之间同步目录。
</p>

<div class="org-src-container">
<pre class="src src-shell">rsync -a host:dirA dirB
</pre>
</div>
</div>
</div>

<div id="outline-container-org7a202a7" class="outline-2">
<h2 id="org7a202a7"><span class="section-number-2">2</span> Options</h2>
<div class="outline-text-2" id="text-2">
<dl class="org-dl">
<dt>-a, &#x2013;archive</dt><dd>等价于 -rlptgoD</dd>
<dt>-r, &#x2013;recursive</dt><dd>递归同步目录中的内容</dd>
<dt>-l, &#x2013;links</dt><dd>copy symlinks as symlinks</dd>
<dt>-p, &#x2013;perms</dt><dd>preserve permissions</dd>
<dt>-t, &#x2013;times </dt><dd>preserver modification times</dd>
<dt>-g, &#x2013;group</dt><dd>preserver group</dd>
<dt>-o, &#x2013;owner</dt><dd>preserver owner (super-user only)</dd>
<dt>-D</dt><dd>same as &#x2013;devices &#x2013;specials</dd>
<dt>&#x2013;devices</dt><dd>preserver device files</dd>
<dt>&#x2013;specials</dt><dd>preserver special files</dd>
<dt>-P, &#x2013;progress</dt><dd>show progress during transfer</dd>
</dl>
</div>
</div>

<div id="outline-container-org873e18b" class="outline-2">
<h2 id="org873e18b"><span class="section-number-2">3</span> 注意</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">
<pre class="src src-shell">rsync -a remote_host:/source/dirA /local/dirB
</pre>
</div>

<p>
上述命令会将远程机器的 <code>dirA</code> 目录拷贝到本地的 <code>dirB</code> 目录下，执行完成之后，本地的目录下将出现一个 <code>dirA</code> 目录，内容与远程机器的 <code>dirA</code> 目录相同。
</p>

<div class="org-src-container">
<pre class="src src-shell">rsync -a remote_host:/source/dirA/ /local/dirB
</pre>
</div>
<p>
上述命令会将远程机器的 <code>dirA</code> 目录中的内容拷贝到本地的 <code>dirB</code> 目录下，在本地
<code>dirB</code> 目录下不会自动创建 <code>dirA</code> 目录。
</p>
</div>
</div>

</div>
</div>]]></description>
      <pubDate>2016-01-08</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/08/用-rsync-同步本地和远程目录-/</guid>
    </item>
    <item>
      <title>Awesome Tools</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/awesome-repos</link>
      <description><![CDATA[awesome tools]]></description>
      <pubDate>2016-01-07</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/awesome-repos</guid>
    </item>
    <item>
      <title>Memory Management in C Language</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/memory-management-in-c-language</link>
      <description><![CDATA[Memory Management in C Language]]></description>
      <pubDate>2016-01-07</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/memory-management-in-c-language</guid>
    </item>
    <item>
      <title>《C 语言核心技术》读书笔记</title>
      <link>http://spark.wangxing.name/blog/2016/01/07/《c-语言核心技术》读书笔记/</link>
      <description><![CDATA[<div>
<div class="post">
<h1 class="title">《C 语言核心技术》读书笔记</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org41273e0">1. 类型转换</a>
<ul>
<li><a href="#org5d438d8">1.1. 隐式类型转换何时发生</a>
<ul>
<li><a href="#org0d05fd7">1.1.1. Conversion rank</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#orgc070997">2. 表达式和运算符</a></li>
<li><a href="#orgc6aef04">3. 函数</a></li>
<li><a href="#org05caf50">4. 数组</a></li>
<li><a href="#org6189aa8">5. 指针</a></li>
<li><a href="#org18d39ea">6. 结构、联合、位字段</a></li>
<li><a href="#org67bd136">7. 声明</a></li>
<li><a href="#org88dc52b">8. 动态内存管理</a>
<ul>
<li><a href="#org98b38a0">8.1. 用于动态内存管理的函数</a></li>
<li><a href="#org4aece80">8.2. 注意事项</a></li>
</ul>
</li>
<li><a href="#org42ae543">9. 输入和输出</a></li>
<li><a href="#orge6eb518">10. 预处理</a></li>
</ul>
</div>
</div>

<div id="outline-container-org41273e0" class="outline-2">
<h2 id="org41273e0"><span class="section-number-2">1</span> 类型转换</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-org5d438d8" class="outline-3">
<h3 id="org5d438d8"><span class="section-number-3">1.1</span> 隐式类型转换何时发生</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>操作数类型不合适</li>
<li>调用一个函数时，自变量的类型与函数参数类型不匹配</li>
<li>变量初始化或给变量赋值</li>
</ul>

<div class="org-src-container">
<pre class="src src-c">int sum  = 22, count = 5;
double mean = (double)sum / count;
</pre>
</div>

<p>
由于类型转换运算符的优先级高于除法运算符，因此 <code>sum</code> 先被转换为 <code>double</code> 。然后编译器隐式地将除数 <code>count</code> 转型，然后进行除法。
</p>
</div>
<div id="outline-container-org0d05fd7" class="outline-4">
<h4 id="org0d05fd7"><span class="section-number-4">1.1.1</span> Conversion rank</h4>
<div class="outline-text-4" id="text-1-1-1">
<ul class="org-ul">
<li>两个无符号整数类型具有不同的转换等级，位长较宽类型的等级较高。</li>
<li></li>
</ul>
</div>
</div>
</div>
</div>
<div id="outline-container-orgc070997" class="outline-2">
<h2 id="orgc070997"><span class="section-number-2">2</span> 表达式和运算符</h2>
</div>
<div id="outline-container-orgc6aef04" class="outline-2">
<h2 id="orgc6aef04"><span class="section-number-2">3</span> 函数</h2>
</div>
<div id="outline-container-org05caf50" class="outline-2">
<h2 id="org05caf50"><span class="section-number-2">4</span> 数组</h2>
</div>
<div id="outline-container-org6189aa8" class="outline-2">
<h2 id="org6189aa8"><span class="section-number-2">5</span> 指针</h2>
</div>
<div id="outline-container-org18d39ea" class="outline-2">
<h2 id="org18d39ea"><span class="section-number-2">6</span> 结构、联合、位字段</h2>
</div>
<div id="outline-container-org67bd136" class="outline-2">
<h2 id="org67bd136"><span class="section-number-2">7</span> 声明</h2>
</div>
<div id="outline-container-org88dc52b" class="outline-2">
<h2 id="org88dc52b"><span class="section-number-2">8</span> 动态内存管理</h2>
<div class="outline-text-2" id="text-8">
</div><div id="outline-container-org98b38a0" class="outline-3">
<h3 id="org98b38a0"><span class="section-number-3">8.1</span> 用于动态内存管理的函数</h3>
<div class="outline-text-3" id="text-8-1">
<dl class="org-dl">
<dt>malloc()</dt><dd>分配新的内存区域</dd>
<dt>calloc()</dt><dd>分配新的内存区域</dd>
<dt>realloc()</dt><dd>调整以前分配的内存区域</dd>
<dt>free()</dt><dd>释放以前分配的内存区域</dd>
</dl>
</div>
</div>
<div id="outline-container-org4aece80" class="outline-3">
<h3 id="org4aece80"><span class="section-number-3">8.2</span> 注意事项</h3>
<div class="outline-text-3" id="text-8-2">
<ul class="org-ul">
<li><code>malloc()</code> 分配的内存不保证会被初始化</li>
<li><code>calloc()</code> 会将分配的内存的每个字节初始化为 0</li>
<li><code>malloc()</code> 和 <code>calloc()</code> 都返回 <code>void</code> 指针</li>
<li>当存取分配的内存位置时，所使用的指针类型决定了如何翻译该位置的数据。</li>
<li>如果内存分配成功，会得到“指向内存区域开端”的指针。“开端”指的是内存区域的最低字节地址。</li>
<li><b>NOTE</b> 分配的内存区域会被 <b>对齐</b> ，任何对象类型都可以存储在该地址。</li>
<li>如果给 <code>malloc()</code> 传入的参数为 0，则行为取决于 <code>malloc()</code> 的具体实现，可能返回
<code>NULL</code> ，也可能返回一个 unique pointer， 返回的这个指针可以传给 <code>free()</code> 函数。</li>
<li>如果给 <code>free()</code> 传入的参数为 <code>NULL</code> ，则函数不起任何作用。</li>
<li>如果给 <code>free()</code> 传入的指针不是 <code>malloc()</code> 等函数分配的，或者已经被释放掉，则
<code>free()</code> 的行为未定义。</li>
</ul>

<div class="org-src-container">
<pre class="src src-c">char *getline(unsigned int len_max) {
  char *linePtr = malloc(len_max + 1);
  if (linePtr != NULL) {
    int c = EOF;
    unsigned int i = 0;
    while (i &lt; len_max &amp;&amp; (c = getchar()) != '\n' &amp;&amp; c != EOF) {
      linePtr[i++] = (char) c;
    }
    linePtr[i] = '\0';

    if (c == EOF &amp;&amp; i == 0) {
      free(linePtr);
      linePtr = NULL;
    } else {
      linePtr = realloc(linePtr, i+1);
    }
  }
  return linePtr;
}

char *line;
if ((line = getline(128)) != NULL)
  {
    /* */
    free(line);
  }
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org42ae543" class="outline-2">
<h2 id="org42ae543"><span class="section-number-2">9</span> 输入和输出</h2>
</div>
<div id="outline-container-orge6eb518" class="outline-2">
<h2 id="orge6eb518"><span class="section-number-2">10</span> 预处理</h2>
</div>

</div>
</div>]]></description>
      <pubDate>2016-01-07</pubDate>
      <guid>http://spark.wangxing.name/blog/2016/01/07/《c-语言核心技术》读书笔记/</guid>
    </item>
  </channel>
</rss>